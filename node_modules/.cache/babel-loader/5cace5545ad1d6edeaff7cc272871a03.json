{"ast":null,"code":"var _jsxFileName = \"/home/yasmeen/practice/DoctorGt/src/components/Fuel.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport ReactDom from 'react-dom';\nimport './status.css'; // import Paper from \"@material-ui/core/Paper\";\n// import {\n//   Chart,\n//   ArgumentAxis,\n//   ValueAxis,\n//   SplineSeries\n// } from \"@devexpress/dx-react-chart-material-ui\";\n\nimport { CanvasJSChart } from 'canvasjs-react-charts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst generateData = (start, end, step) => {\n  const data = [];\n\n  for (let i = start; i <= end; i += step) {\n    data.push({\n      value: Math.sin(i) / i,\n      argument: i\n    });\n  }\n\n  return data;\n};\n\nlet data = generateData(1, 6, 1);\n\nfunction Fuel(props) {\n  const options = {\n    animationEnabled: true,\n    title: {\n      text: \"Fuel Cost\"\n    },\n    axisY: {\n      title: \"AVG/100km\" // suffix: \" kWh\"\n\n    },\n    data: [{\n      type: \"splineArea\",\n      xValueFormatString: \"YYYY\",\n      yValueFormatString: \"#,##0.## bn kW⋅h\",\n      showInLegend: true,\n      legendText: \"kWh = one kilowatt hour\",\n      dataPoints: [{\n        x: new Date(2008, 0),\n        y: 70.735\n      }, {\n        x: new Date(2009, 0),\n        y: 74.102\n      }, {\n        x: new Date(2010, 0),\n        y: 72.569\n      }, {\n        x: new Date(2011, 0),\n        y: 72.743\n      }, {\n        x: new Date(2012, 0),\n        y: 72.381\n      }, {\n        x: new Date(2013, 0),\n        y: 71.406\n      }, {\n        x: new Date(2014, 0),\n        y: 73.163\n      }, {\n        x: new Date(2015, 0),\n        y: 74.270\n      }, {\n        x: new Date(2016, 0),\n        y: 72.525\n      }, {\n        x: new Date(2017, 0),\n        y: 73.121\n      }]\n    }]\n  }; // const monthlySum = ()=>{\n  //     let sum = 0;\n  //     for(let i= 0; i < props.data.length; i++){\n  //         sum += props.data[i].monthlyFuel\n  //     }\n  //     console.log('the sum', sum)\n  //     return sum;\n  // }\n  // monthlySum();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(CanvasJSChart, {\n        options: options\n        /* onRef={ref => this.chart = ref} */\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_c = Fuel;\nexport default Fuel;\n\nvar _c;\n\n$RefreshReg$(_c, \"Fuel\");","map":{"version":3,"sources":["/home/yasmeen/practice/DoctorGt/src/components/Fuel.jsx"],"names":["React","useEffect","useState","ReactDom","CanvasJSChart","generateData","start","end","step","data","i","push","value","Math","sin","argument","Fuel","props","options","animationEnabled","title","text","axisY","type","xValueFormatString","yValueFormatString","showInLegend","legendText","dataPoints","x","Date","y"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactDom from 'react-dom'; \nimport './status.css'\n// import Paper from \"@material-ui/core/Paper\";\n// import {\n//   Chart,\n//   ArgumentAxis,\n//   ValueAxis,\n//   SplineSeries\n// } from \"@devexpress/dx-react-chart-material-ui\";\n\n\nimport {CanvasJSChart} from 'canvasjs-react-charts'\n\nconst generateData = (start, end, step) => {\n  const data = [];\n  for (let i = start; i <= end; i += step) {\n    data.push({ value: Math.sin(i) / i, argument: i });\n  }\n\n  return data;\n};\nlet data = generateData(1,6,1)\nfunction Fuel(props){\n  const options = {\n    animationEnabled: true,\n    title: {\n      text: \"Fuel Cost\"\n    },\n    axisY: {\n      title: \"AVG/100km\",\n      // suffix: \" kWh\"\n    },\n    data: [{\n      type: \"splineArea\",\n      xValueFormatString: \"YYYY\",\n      yValueFormatString: \"#,##0.## bn kW⋅h\",\n      showInLegend: true,\n      legendText: \"kWh = one kilowatt hour\",\n      dataPoints: [\n        { x: new Date(2008, 0), y: 70.735 },\n        { x: new Date(2009, 0), y: 74.102 },\n        { x: new Date(2010, 0), y: 72.569 },\n        { x: new Date(2011, 0), y: 72.743 },\n        { x: new Date(2012, 0), y: 72.381 },\n        { x: new Date(2013, 0), y: 71.406 },\n        { x: new Date(2014, 0), y: 73.163 },\n        { x: new Date(2015, 0), y: 74.270 },\n        { x: new Date(2016, 0), y: 72.525 },\n        { x: new Date(2017, 0), y: 73.121 }\n      ]\n    }]\n  }\n\n    // const monthlySum = ()=>{\n    //     let sum = 0;\n    //     for(let i= 0; i < props.data.length; i++){\n    //         sum += props.data[i].monthlyFuel\n    //     }\n    //     console.log('the sum', sum)\n    //     return sum;\n    // }\n    // monthlySum();\n    return(\n        <>\n        <div>\n\t\t\t<CanvasJSChart options = {options}\n\t\t\t\t/* onRef={ref => this.chart = ref} */\n\t\t\t/>\n\t\t\t{/*You can get reference to the chart instance as shown above using onRef. This allows you to access all chart properties and methods*/}\n\t\t</div>\n        {/* <Paper>\n      <Chart data={data} width={650} height={500}>\n        <ArgumentAxis showGrid />\n        <ValueAxis />\n\n        <SplineSeries valueField=\"value\" argumentField=\"argument\" />\n      </Chart>\n    </Paper> */}\n\n        </>\n    )\n}\n\nexport default Fuel;"]},"metadata":{},"sourceType":"module"}