{"ast":null,"code":"import React, { Fragment } from 'react';\n/**\n * Renders a React component while also checking whether the children are a function or not\n * @param props Props of the component to render\n */\n\nvar render = function render(props) {\n  if (typeof props.children === 'function') {\n    return React.createElement(Fragment, null, props.children());\n  }\n\n  return React.createElement(Fragment, null, props.children || null);\n};\n/**\n * If the `<Case />` is the first one to have its condition evaluates to true\n * inside the parent `<Switch />` it will be the only rendered.\n * @param props The props to pass down to the `<Case />` component\n */\n\n\nvar Case = function Case(props) {\n  return render(props);\n};\n\nCase.defaultProps = {\n  children: null\n};\n/**\n * If no `<Case />` have its condition evaluates to true inside the parent `<Switch />`,\n * the first `<Default />` will be the only one rendered.\n * @param props The props to pass down to the `<Default />` component\n */\n\nvar Default = function Default(props) {\n  return render(props);\n};\n\nDefault.defaultProps = {\n  children: null\n};\n/**\n * Must only contain a single child, which it renders as-is.\n * Should not be used outside of an `<If />` block.\n * @param props The props to pass down to the `<Else />` component\n */\n\nvar Else = function Else(props) {\n  return render(props);\n};\n/**\n * Resolves a condition that is {@link BooleanLike} or returns {@link BooleanLike} from a function\n * @param condition The condition to resolve\n */\n\n\nvar getConditionResult = function getConditionResult(condition) {\n  var conditionResult = Boolean(typeof condition === 'function' ? condition() : condition);\n  return conditionResult;\n};\n/**\n * Handles errors by throwing them to the console.\n * `__DEV__` is replaced by tsdx using {@link https://www.npmjs.com/package/babel-plugin-dev-expression babel-plugin-dev-expressions}\n * which will ensure this entire throw is not present in production\n * @param condition The condition to check\n * @param message The message to throw if `condition` resolves to `true`\n */\n\n\nfunction invariant(condition, message) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (condition) {\n      throw new Error(message);\n    }\n  }\n}\n/**\n * Must contain only a single child, which it renders as-is.\n * Should not be used outside of an `<If />` block.\n * @param props The props to pass down to the `<Then />` component\n */\n\n\nvar Then = function Then(props) {\n  return render(props);\n};\n/**\n * If condition evaluates to true, renders the `<Then />` block will be rendered,\n * otherwise renders the `<Else />` block. Either block may be omitted.\n *\n * This component can contain any number of `<Then />` or `<Else />` blocks,\n * but only the first block of the right type (either Then or Else, depending on the condition) will be rendered.\n * @param __namedParameters The props to pass down to the `<IF />` component, see {@link ComponentWithConditionProps}\n */\n\n\nvar If = function If(_ref) {\n  var condition = _ref.condition,\n      children = _ref.children;\n\n  if (!children) {\n    return null;\n  }\n\n  !(!Array.isArray(children) && !(children.type === Else || children.type === Then) || !React.Children.toArray(children).every(function (child) {\n    return child.type === Else || child.type === Then;\n  })) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'The <If> component should contain <Then /> and <Else /> components as its children') : invariant(false) : void 0;\n  var conditionResult = getConditionResult(condition);\n  return React.createElement(Fragment, null, React.Children.toArray(children).find(function (c) {\n    return c.type !== Else !== !conditionResult;\n  }) || null);\n};\n/**\n * It will render the first matching `<Case />`, or the first encountered `<Default />` (or `null`).\n *\n * This component can contain any number of `<Case />` and one `<Default />` blocks\n * @param __namedParameters Children to pass into the `<Switch />` component\n */\n\n\nvar Switch = function Switch(_ref) {\n  var _ref2, _matchingCase;\n\n  var children = _ref.children; // -- Inspired by react-router --\n  // We use React.Children.forEach instead of React.Children.toArray().find()\n  // here because toArray adds keys to all child elements and we do not want\n  // to trigger an unmount/remount for two children <Case>s or <Default>s\n\n  var matchingCase = undefined;\n  var defaultCase = undefined;\n  React.Children.forEach(children, function (child) {\n    // not a valid react child, don't add it\n\n    /* istanbul ignore next - This is only a safe fail for people writing bad code */\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (!matchingCase && child.type === Case) {\n      var condition = child.props.condition;\n      var conditionResult = getConditionResult(condition);\n\n      if (conditionResult) {\n        matchingCase = child;\n      } // else not matching condition, don't add it\n\n    } else if (!defaultCase && child.type === Default) {\n      defaultCase = child;\n    } // else unknown type, don't add it\n\n  });\n  return (_ref2 = (_matchingCase = matchingCase) != null ? _matchingCase : defaultCase) != null ? _ref2 : null;\n};\n/** A shorthand for\n *\n * ```jsx\n * <If condition={...}>\n *     <Else>\n *         { ... }\n *     </Else>\n * </If>\n * ```\n *\n * The same rules apply to the child elements as with using the `<Else />` block.\n *\n * @param __namedParameters The props to pass down to the `<IF />` component, see {@link ComponentWithConditionProps}\n */\n\n\nvar Unless = function Unless(_ref) {\n  var condition = _ref.condition,\n      children = _ref.children;\n  var conditionResult = Boolean(getConditionResult(condition));\n  return !conditionResult && children ? render({\n    children: children\n  }) : null;\n};\n\nUnless.defaultProps = {\n  children: null\n};\n/** A shorthand for\n *\n * ```jsx\n * <If condition={...}>\n *     <Then>\n *         { ... }\n *     </Then>\n * </If>\n * ```\n *\n * The same rules apply to the child elements as with using the `<Then /`> block.\n *\n * @param __namedParameters The props to pass down to the `<IF />` component, see {@link ComponentWithConditionProps}\n */\n\nvar When = function When(_ref) {\n  var condition = _ref.condition,\n      children = _ref.children;\n  var conditionResult = Boolean(getConditionResult(condition));\n  return conditionResult && children ? render({\n    children: children\n  }) : null;\n};\n\nWhen.defaultProps = {\n  children: null\n};\nexport { Case, Default, Else, If, Switch, Then, Unless, When };","map":{"version":3,"sources":["../src/render.tsx","../src/Case.tsx","../src/Default.tsx","../src/Else.tsx","../src/getConditionResults.ts","../src/invariant.ts","../src/Then.tsx","../src/If.tsx","../src/Switch.tsx","../src/Unless.tsx","../src/When.tsx"],"names":["render","props","React","Case","children","Default","Else","getConditionResult","conditionResult","Boolean","condition","invariant","message","Then","If","Array","child","c","Switch","matchingCase","defaultCase","Unless","When"],"mappings":"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","sourcesContent":["import React, { FC, Fragment } from 'react';\n\n/**\n * Renders a React component while also checking whether the children are a function or not\n * @param props Props of the component to render\n */\nexport const render: FC = props => {\n  if (typeof props.children === 'function') {\n    return <Fragment>{props.children()}</Fragment>;\n  }\n\n  return <Fragment>{props.children || null}</Fragment>;\n};\n","import { FC } from 'react';\nimport { render } from './render';\nimport { ComponentWithConditionProps } from './types';\n\n/**\n * If the `<Case />` is the first one to have its condition evaluates to true\n * inside the parent `<Switch />` it will be the only rendered.\n * @param props The props to pass down to the `<Case />` component\n */\nexport const Case: FC<ComponentWithConditionProps> = props => render(props);\n\nCase.defaultProps = {\n  children: null\n};\n","import { FC } from 'react';\nimport { render } from './render';\n\n/**\n * If no `<Case />` have its condition evaluates to true inside the parent `<Switch />`,\n * the first `<Default />` will be the only one rendered.\n * @param props The props to pass down to the `<Default />` component\n */\nexport const Default: FC = props => render(props);\n\nDefault.defaultProps = {\n  children: null\n};\n","import { FC } from 'react';\nimport { render } from './render';\n\n/**\n * Must only contain a single child, which it renders as-is.\n * Should not be used outside of an `<If />` block.\n * @param props The props to pass down to the `<Else />` component\n */\nexport const Else: FC = props => render(props);\n","import { BooleanLike } from './types';\n\n/**\n * Resolves a condition that is {@link BooleanLike} or returns {@link BooleanLike} from a function\n * @param condition The condition to resolve\n */\nexport const getConditionResult = (condition: BooleanLike | ((...args: unknown[]) => BooleanLike)) => {\n  const conditionResult = Boolean(typeof condition === 'function' ? condition() : condition);\n\n  return conditionResult;\n};\n","/**\n * Handles errors by throwing them to the console.\n * `__DEV__` is replaced by tsdx using {@link https://www.npmjs.com/package/babel-plugin-dev-expression babel-plugin-dev-expressions}\n * which will ensure this entire throw is not present in production\n * @param condition The condition to check\n * @param message The message to throw if `condition` resolves to `true`\n */\nexport function invariant(condition: boolean, message: string): asserts condition {\n  if (__DEV__) {\n    if (condition) {\n      throw new Error(message);\n    }\n  }\n}\n","import { FC } from 'react';\nimport { render } from './render';\n\n/**\n * Must contain only a single child, which it renders as-is.\n * Should not be used outside of an `<If />` block.\n * @param props The props to pass down to the `<Then />` component\n */\nexport const Then: FC = props => render(props);\n","import React, { FC, Fragment, ReactElement } from 'react';\nimport { Else } from './Else';\nimport { getConditionResult } from './getConditionResults';\nimport { invariant } from './invariant';\nimport { Then } from './Then';\nimport { ComponentWithConditionProps } from './types';\n\n/**\n * If condition evaluates to true, renders the `<Then />` block will be rendered,\n * otherwise renders the `<Else />` block. Either block may be omitted.\n *\n * This component can contain any number of `<Then />` or `<Else />` blocks,\n * but only the first block of the right type (either Then or Else, depending on the condition) will be rendered.\n * @param __namedParameters The props to pass down to the `<IF />` component, see {@link ComponentWithConditionProps}\n */\nexport const If: FC<ComponentWithConditionProps> = ({ condition, children }) => {\n  if (!children) {\n    return null;\n  }\n\n  invariant(\n    (!Array.isArray(children) && !((children as ReactElement).type === Else || (children as ReactElement).type === Then)) ||\n      !(React.Children.toArray(children) as ReactElement[]).every(child => child.type === Else || child.type === Then),\n    'The <If> component should contain <Then /> and <Else /> components as its children'\n  );\n\n  const conditionResult = getConditionResult(condition);\n\n  return (\n    <Fragment>{(React.Children.toArray(children) as ReactElement[]).find(c => (c.type !== Else) !== !conditionResult) || null}</Fragment>\n  );\n};\n","import React, { FC, ReactElement } from 'react';\nimport { Case } from './Case';\nimport { Default } from './Default';\nimport { getConditionResult } from './getConditionResults';\n\n/**\n * It will render the first matching `<Case />`, or the first encountered `<Default />` (or `null`).\n *\n * This component can contain any number of `<Case />` and one `<Default />` blocks\n * @param __namedParameters Children to pass into the `<Switch />` component\n */\nexport const Switch: FC = ({ children }) => {\n  // -- Inspired by react-router --\n\n  // We use React.Children.forEach instead of React.Children.toArray().find()\n  // here because toArray adds keys to all child elements and we do not want\n  // to trigger an unmount/remount for two children <Case>s or <Default>s\n  let matchingCase: ReactElement | undefined = undefined;\n  let defaultCase: ReactElement | undefined = undefined;\n\n  React.Children.forEach(children, child => {\n    // not a valid react child, don't add it\n    /* istanbul ignore next - This is only a safe fail for people writing bad code */\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (!matchingCase && child.type === Case) {\n      const condition = child.props.condition;\n\n      const conditionResult = getConditionResult(condition);\n\n      if (conditionResult) {\n        matchingCase = child;\n      } // else not matching condition, don't add it\n    } else if (!defaultCase && child.type === Default) {\n      defaultCase = child;\n    } // else unknown type, don't add it\n  });\n\n  return matchingCase ?? defaultCase ?? null;\n};\n","import { FC } from 'react';\nimport { getConditionResult } from './getConditionResults';\nimport { render } from './render';\nimport { ComponentWithConditionProps } from './types';\n\n/** A shorthand for\n *\n * ```jsx\n * <If condition={...}>\n *     <Else>\n *         { ... }\n *     </Else>\n * </If>\n * ```\n *\n * The same rules apply to the child elements as with using the `<Else />` block.\n *\n * @param __namedParameters The props to pass down to the `<IF />` component, see {@link ComponentWithConditionProps}\n */\nexport const Unless: FC<ComponentWithConditionProps> = ({ condition, children }) => {\n  const conditionResult = Boolean(getConditionResult(condition));\n\n  return !conditionResult && children ? render({ children }) : null;\n};\n\nUnless.defaultProps = {\n  children: null\n};\n","import { FC } from 'react';\nimport { getConditionResult } from './getConditionResults';\nimport { render } from './render';\nimport { ComponentWithConditionProps } from './types';\n\n/** A shorthand for\n *\n * ```jsx\n * <If condition={...}>\n *     <Then>\n *         { ... }\n *     </Then>\n * </If>\n * ```\n *\n * The same rules apply to the child elements as with using the `<Then /`> block.\n *\n * @param __namedParameters The props to pass down to the `<IF />` component, see {@link ComponentWithConditionProps}\n */\nexport const When: FC<ComponentWithConditionProps> = ({ condition, children }) => {\n  const conditionResult = Boolean(getConditionResult(condition));\n\n  return conditionResult && children ? render({ children }) : null;\n};\n\nWhen.defaultProps = {\n  children: null\n};\n"]},"metadata":{},"sourceType":"module"}