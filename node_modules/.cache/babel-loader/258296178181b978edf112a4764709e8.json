{"ast":null,"code":"var _jsxFileName = \"/home/yasmeen/practice/DoctorGt/src/components/Condition.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ReactDom from 'react-dom';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport Divider from '@material-ui/core/Divider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 345\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%' // 16:9\n\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest\n    })\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)'\n  },\n  avatar: {\n    backgroundColor: red[500]\n  }\n}));\n\nfunction Condition(props) {\n  _s();\n\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  let good = [];\n  let satisfactory = [];\n  let critical = [];\n\n  for (let i = 0; i < props.data.length; i++) {\n    if (props.data[i].condition === 'Good') {\n      good.push(props.data[i]);\n    } else if (props.data[i].condition === 'Satisfactory') {\n      satisfactory.push(props.data[i]);\n    } else {\n      critical.push(props.data[i]);\n    }\n  }\n\n  let goodPercentage = good.length / props.data.length * 100;\n  let satisfactoryPercentage = satisfactory.length / props.data.length * 100;\n  let criticalPercentage = critical.length / props.data.length * 100;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        title: \"Good\",\n        subheader: `${goodPercentage}%`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: `25%`,\n        value: goodPercentage,\n        thickness: 3,\n        variant: \"static\",\n        color: \"secondary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        variant: \"middle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          component: \"p\",\n          children: [good.length, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 23\n          }, this), \"Vehicle\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        title: \"Satisfactory\",\n        subheader: `${satisfactoryPercentage}%`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: `25%`,\n        value: satisfactoryPercentage,\n        thickness: 3,\n        variant: \"static\",\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        variant: \"middle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          component: \"p\",\n          children: [satisfactory.length, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 31\n          }, this), \"Vehicle\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        title: \"Critical\",\n        subheader: `${criticalPercentage}%`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: `25%`,\n        value: criticalPercentage,\n        thickness: 3,\n        variant: \"static\",\n        color: \"default\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        variant: \"middle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          component: \"p\",\n          children: [critical.length, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 27\n          }, this), \"Vehicle\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Condition, \"h4ZSQ0ae6nPGs2BiQgjY3xQWnvE=\", false, function () {\n  return [useStyles];\n});\n\n_c = Condition;\nexport default Condition;\n\nvar _c;\n\n$RefreshReg$(_c, \"Condition\");","map":{"version":3,"sources":["/home/yasmeen/practice/DoctorGt/src/components/Condition.jsx"],"names":["React","useEffect","useState","ReactDom","CircularProgress","makeStyles","Card","CardHeader","CardMedia","CardContent","CardActions","Collapse","Avatar","IconButton","Typography","red","Divider","useStyles","theme","root","maxWidth","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","Condition","props","classes","expanded","setExpanded","handleExpandClick","good","satisfactory","critical","i","data","length","condition","push","goodPercentage","satisfactoryPercentage","criticalPercentage"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactDom from 'react-dom'; \n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport Divider from '@material-ui/core/Divider';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n}));\n\n  \n\n\n\nfunction Condition (props){\n    const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n    let good = [];\n    let satisfactory = [];\n    let critical = [];\n\n    for(let i =0; i < props.data.length ; i++){\n        if(props.data[i].condition === 'Good'){\n            good.push(props.data[i])\n        }\n        else if(props.data[i].condition === 'Satisfactory'){\n            satisfactory.push(props.data[i])\n        } else {\n            critical.push(props.data[i])\n        }\n    }\n\n    let goodPercentage = good.length/props.data.length * 100;\n    let satisfactoryPercentage = satisfactory.length/props.data.length * 100;\n    let criticalPercentage = critical.length/props.data.length * 100;\n\n    return(\n        <>\n <Card className={classes.root}>\n      <CardHeader\n        title=\"Good\"\n        subheader={`${goodPercentage}%`}\n      />\n          <CircularProgress\n          size={`25%`}\n          value={goodPercentage}\n          thickness={3}\n          variant=\"static\"\n          color=\"secondary\"\n        />\n      <Divider variant=\"middle\" />\n      <CardContent>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n        {good.length} <br/>\n        Vehicle \n        </Typography>\n      </CardContent>\n      \n    </Card>\n\n    <Card className={classes.root}>\n      <CardHeader\n        title=\"Satisfactory\"\n        subheader={`${satisfactoryPercentage}%`}\n      />\n         <CircularProgress\n      size={`25%`}\n      value={satisfactoryPercentage}\n      thickness={3}\n      variant=\"static\"\n      color=\"primary\"\n    />\n     <Divider variant=\"middle\" />\n      <CardContent>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n        {satisfactory.length} <br/>\n        Vehicle\n        </Typography>\n      </CardContent>\n      \n    </Card>\n\n    <Card className={classes.root}>\n      <CardHeader\n        title=\"Critical\"\n        subheader={`${criticalPercentage}%`}\n      />\n         <CircularProgress\n      size={`25%`}\n      value={criticalPercentage}\n      thickness={3}\n      variant=\"static\"\n      color=\"default\"\n    />\n    <Divider variant=\"middle\" />\n      <CardContent>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n        {critical.length} <br/>\n        Vehicle\n        </Typography>\n      </CardContent>\n      \n    </Card>\n\n    \n        </>\n    )\n}\n\nexport default Condition;"]},"metadata":{},"sourceType":"module"}