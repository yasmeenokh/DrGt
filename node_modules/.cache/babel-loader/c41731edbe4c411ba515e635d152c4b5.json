{"ast":null,"code":"var _jsxFileName = \"/home/yasmeen/practice/DoctorGt/src/components/Condition.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport ReactDom from 'react-dom';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Condition(props) {\n  let good = [];\n  let satisfactory = [];\n  let critical = [];\n\n  for (let i = 0; i < props.data.length; i++) {\n    if (props.data[i].condition === 'Good') {\n      good.push(props.data[i]);\n    } else if (props.data[i].condition === 'Satisfactory') {\n      satisfactory.push(props.data[i]);\n    } else {\n      critical.push(props.data[i]);\n    }\n  }\n\n  let goodPercentage = good.length / props.data.length * 100;\n  let satisfactoryPercentage = satisfactory.length / props.data.length * 100;\n  let criticalPercentage = critical.length / props.data.length * 100;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n      size: `${goodPercentage}%`,\n      value: goodPercentage,\n      thickness: 2,\n      variant: \"static\",\n      color: \"secondary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(CircularProgress, {\n      size: `${satisfactoryPercentage}%`,\n      value: satisfactoryPercentage,\n      thickness: 2,\n      variant: \"static\",\n      color: \"primary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n}\n\n_c = Condition;\nexport default Condition;\n\nvar _c;\n\n$RefreshReg$(_c, \"Condition\");","map":{"version":3,"sources":["/home/yasmeen/practice/DoctorGt/src/components/Condition.jsx"],"names":["React","useEffect","useState","ReactDom","CircularProgress","Condition","props","good","satisfactory","critical","i","data","length","condition","push","goodPercentage","satisfactoryPercentage","criticalPercentage"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAOC,gBAAP,MAA6B,oCAA7B;;;;AAGA,SAASC,SAAT,CAAoBC,KAApB,EAA0B;AACtB,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,QAAQ,GAAG,EAAf;;AAEA,OAAI,IAAIC,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAGJ,KAAK,CAACK,IAAN,CAAWC,MAA7B,EAAsCF,CAAC,EAAvC,EAA0C;AACtC,QAAGJ,KAAK,CAACK,IAAN,CAAWD,CAAX,EAAcG,SAAd,KAA4B,MAA/B,EAAsC;AAClCN,MAAAA,IAAI,CAACO,IAAL,CAAUR,KAAK,CAACK,IAAN,CAAWD,CAAX,CAAV;AACH,KAFD,MAGK,IAAGJ,KAAK,CAACK,IAAN,CAAWD,CAAX,EAAcG,SAAd,KAA4B,cAA/B,EAA8C;AAC/CL,MAAAA,YAAY,CAACM,IAAb,CAAkBR,KAAK,CAACK,IAAN,CAAWD,CAAX,CAAlB;AACH,KAFI,MAEE;AACHD,MAAAA,QAAQ,CAACK,IAAT,CAAcR,KAAK,CAACK,IAAN,CAAWD,CAAX,CAAd;AACH;AACJ;;AAED,MAAIK,cAAc,GAAGR,IAAI,CAACK,MAAL,GAAYN,KAAK,CAACK,IAAN,CAAWC,MAAvB,GAAgC,GAArD;AACA,MAAII,sBAAsB,GAAGR,YAAY,CAACI,MAAb,GAAoBN,KAAK,CAACK,IAAN,CAAWC,MAA/B,GAAwC,GAArE;AACA,MAAIK,kBAAkB,GAAGR,QAAQ,CAACG,MAAT,GAAgBN,KAAK,CAACK,IAAN,CAAWC,MAA3B,GAAoC,GAA7D;AAEA,sBACI;AAAA,4BACC,QAAC,gBAAD;AACH,MAAA,IAAI,EAAG,GAAEG,cAAe,GADrB;AAEH,MAAA,KAAK,EAAEA,cAFJ;AAGH,MAAA,SAAS,EAAE,CAHR;AAIH,MAAA,OAAO,EAAC,QAJL;AAKH,MAAA,KAAK,EAAC;AALH;AAAA;AAAA;AAAA;AAAA,YADD,eAQH,QAAC,gBAAD;AACC,MAAA,IAAI,EAAG,GAAEC,sBAAuB,GADjC;AAEC,MAAA,KAAK,EAAEA,sBAFR;AAGC,MAAA,SAAS,EAAE,CAHZ;AAIC,MAAA,OAAO,EAAC,QAJT;AAKC,MAAA,KAAK,EAAC;AALP;AAAA;AAAA;AAAA;AAAA,YARG;AAAA,kBADJ;AAkBH;;KAtCQX,S;AAwCT,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactDom from 'react-dom'; \n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nfunction Condition (props){\n    let good = [];\n    let satisfactory = [];\n    let critical = [];\n\n    for(let i =0; i < props.data.length ; i++){\n        if(props.data[i].condition === 'Good'){\n            good.push(props.data[i])\n        }\n        else if(props.data[i].condition === 'Satisfactory'){\n            satisfactory.push(props.data[i])\n        } else {\n            critical.push(props.data[i])\n        }\n    }\n\n    let goodPercentage = good.length/props.data.length * 100;\n    let satisfactoryPercentage = satisfactory.length/props.data.length * 100;\n    let criticalPercentage = critical.length/props.data.length * 100;\n\n    return(\n        <>\n         <CircularProgress\n      size={`${goodPercentage}%`}\n      value={goodPercentage}\n      thickness={2}\n      variant=\"static\"\n      color=\"secondary\"\n    />\n     <CircularProgress\n      size={`${satisfactoryPercentage}%`}\n      value={satisfactoryPercentage}\n      thickness={2}\n      variant=\"static\"\n      color=\"primary\"\n    />\n        </>\n    )\n}\n\nexport default Condition;"]},"metadata":{},"sourceType":"module"}